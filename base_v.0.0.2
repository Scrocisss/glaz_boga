import requests
from vk_api import VkApi
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
from tabulate import tabulate
from deep_translator import GoogleTranslator
from collections import Counter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = '7915283986:AAFIocGTVRJrVPMp0_ON1eJTH067AFODCyA'
VK_APP_ID = '52617075'
VK_APP_SECRET = 'qfDpuDhGN2zE7aSathiP'
VK_API_VERSION = '5.131'


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ VK
def get_service_token():
    url = (
        f"https://oauth.vk.com/access_token?client_id={VK_APP_ID}"
        f"&client_secret={VK_APP_SECRET}&v={VK_API_VERSION}&grant_type=client_credentials"
    )
    response = requests.get(url)
    data = response.json()
    return data.get("access_token")


VK_SERVICE_TOKEN = get_service_token()
vk_session = VkApi(token=VK_SERVICE_TOKEN)
vk = vk_session.get_api()


# –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
def translate_text(text, target_language, source_language='auto'):
    try:
        translated_text = GoogleTranslator(source=source_language, target=target_language).translate(text)
        return translated_text
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏
def wrap_text(text, max_length=40):
    words = text.split()
    lines = []
    line = ""
    for word in words:
        if len(line) + len(word) + 1 > max_length:
            lines.append(line)
            line = word
        else:
            line += (" " + word if line else word)
    lines.append(line)
    return "\n".join(lines)


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
def format_bdate(bdate, target_language):
    month_names = {'01': '—è–Ω–≤–∞—Ä—è', '02': '—Ñ–µ–≤—Ä–∞–ª—è', '03': '–º–∞—Ä—Ç–∞', '04': '–∞–ø—Ä–µ–ª—è', '05': '–º–∞—è', '06': '–∏—é–Ω—è',
                   '07': '–∏—é–ª—è', '08': '–∞–≤–≥—É—Å—Ç–∞', '09': '—Å–µ–Ω—Ç—è–±—Ä—è', '10': '–æ–∫—Ç—è–±—Ä—è', '11': '–Ω–æ—è–±—Ä—è', '12': '–¥–µ–∫–∞–±—Ä—è'}
    month_names_en = {'01': 'January', '02': 'February', '03': 'March', '04': 'April', '05': 'May', '06': 'June',
                      '07': 'July', '08': 'August', '09': 'September', '10': 'October', '11': 'November',
                      '12': 'December'}
    month_dict = month_names if target_language == 'ru' else month_names_en
    parts = bdate.split('.')
    if len(parts) == 3:
        day, month, year = parts
        return f"{int(day)} {month_dict.get(month.zfill(2), '')} {year}"
    elif len(parts) == 2:
        day, month = parts
        return f"{int(day)} {month_dict.get(month.zfill(2), '')}"
    return bdate


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def format_personal_info(personal_info, language):
    personal_fields = {
        "alcohol": "üç∑ –ê–ª–∫–æ–≥–æ–ª—å" if language == 'ru' else "üç∑ Alcohol",
        "inspired_by": "‚ú® –í–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω(–∞)" if language == 'ru' else "‚ú® Inspired by",
        "langs": "üåê –Ø–∑—ã–∫–∏" if language == 'ru' else "üåê Languages",
        "life_main": "üíº –ì–ª–∞–≤–Ω–æ–µ –≤ –∂–∏–∑–Ω–∏" if language == 'ru' else "üíº Life main",
        "people_main": "üë• –ì–ª–∞–≤–Ω–æ–µ –≤ –ª—é–¥—è—Ö" if language == 'ru' else "üë• People main",
        "smoking": "üö¨ –ö—É—Ä–µ–Ω–∏–µ" if language == 'ru' else "üö¨ Smoking"
    }
    return ', '.join(f"{personal_fields.get(k, k)}: {v}" for k, v in personal_info.items() if v and not isinstance(v, list))


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤
def get_relative_names(relatives, language):
    if not relatives:
        return translate_text("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞—Ö.", language)

    relative_names = []
    for relative in relatives:
        relative_id = relative.get("id")
        try:
            user_info = vk.users.get(user_ids=relative_id)
            if user_info:
                name = f"{user_info[0]['first_name']} {user_info[0]['last_name']}"
                relation = translate_text(relative.get('type', ''), language)
                relative_names.append(f"{relation}: {name}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–µ: {e}")
    return ', '.join(relative_names)


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π, –≤–∫–ª—é—á–∞—è —Å–ª–æ–≤–∞—Ä–∏ –∏ —Å–ø–∏—Å–∫–∏
def format_value(value, language):
    if isinstance(value, dict):
        if "title" in value:
            return value["title"]
        return ', '.join(f"{translate_text(k, language)}: {v}" for k, v in value.items() if isinstance(v, (str, int)))
    elif isinstance(value, list):
        return ', '.join(format_value(item, language) for item in value if isinstance(item, (dict, str, int)))
    return translate_text(str(value), language)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_vk_user_id(vk_id):
    try:
        if vk_id.isdigit():
            return int(vk_id)
        response = vk.users.get(user_ids=vk_id)
        return response[0]['id'] if response else None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
def fetch_vk_info(vk_id):
    try:
        response = vk.users.get(
            user_ids=vk_id,
            fields="first_name, last_name, maiden_name, screen_name, sex, relation, relation_partner, bdate, "
                   "bdate_visibility, home_town, country, city, status, phone, verified, online, universities, "
                   "schools, occupation, personal, interests, movies, tv, books, games, about, quotes, relatives",
            v=VK_API_VERSION
        )
        return response[0] if response else None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: {e}")
        return None


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π –∏ –∏—Ö –≥–æ—Ä–æ–¥–æ–≤
def fetch_vk_friends(vk_id, language):
    try:
        friends = vk.friends.get(user_id=vk_id, fields="city")
        if 'items' not in friends:
            raise Exception("Profile is private")

        city_counter = Counter()
        for friend in friends['items']:
            city_title = friend.get('city', {}).get('title')
            if city_title:
                city_counter[city_title] += 1

        sorted_cities = sorted(city_counter.items(), key=lambda x: x[1], reverse=True)
        filtered_cities = {city: count for city, count in sorted_cities if count >= 3}

        if filtered_cities:
            response = "\n".join(
                [f"{translate_text(city, language)}: {count}" for city, count in filtered_cities.items()])
        else:
            response = translate_text("Profile is private.", language)

        return response

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥—Ä—É–∑–µ–π: {e}")
        return translate_text("Profile is private.", language)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
def fetch_vk_subscriptions(vk_id, language):
    try:
        subscriptions = vk.users.getSubscriptions(user_id=vk_id, extended=1)
        if subscriptions['count'] == 0:
            return translate_text("Profile is private.", language)
        return "\n".join([f"{s['name']} (https://vk.com/{s['screen_name']})" for s in subscriptions['items']])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        return translate_text("Profile is private.", language)


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='lang_ru')],
        [InlineKeyboardButton("üá¨üáß English", callback_data='lang_en')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language:", reply_markup=reply_markup)


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞
async def set_language(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    context.user_data['language'] = 'ru' if query.data == 'lang_ru' else 'en'
    msg = "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π.\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–ö, –ª–∏–±–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è." if query.data == 'lang_ru' else "Language set to English.\nEnter the link to the VK page or the user ID."
    await query.edit_message_text(msg)


# –î—Ä—É–≥–∏–µ —á–∞—Å—Ç–∏ –∫–æ–¥–∞ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ...

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π
def format_data_with_fixed_value_alignment(data, value_start_pos=30):
    formatted_data = []
    for label, value in data:
        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–∞—á–∏–Ω–∞–ª–æ—Å—å —Å –æ–¥–Ω–æ–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
        spaces = " " * (value_start_pos - len(label) - 2)  # -2 –¥–ª—è ": " –ø–æ—Å–ª–µ label
        formatted_label = f"{label}:"
        formatted_data.append(f"{formatted_label}{spaces}{value}")
    return "\n".join(formatted_data)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–π
async def handle_link(update: Update, context: CallbackContext):
    vk_id_input = update.message.text.strip().split('/')[-1]
    vk_id = get_vk_user_id(vk_id_input)
    if not vk_id:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    language = context.user_data.get('language', 'ru')
    target_lang = 'ru' if language == 'ru' else 'en'
    user_info = fetch_vk_info(vk_id)
    friends_info = fetch_vk_friends(vk_id, target_lang)
    subscriptions_info = fetch_vk_subscriptions(vk_id, target_lang)

    if user_info:
        data = []
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª–Ω–æ–µ –∏–º—è
        full_name = translate_text(f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}", target_lang)
        if full_name.strip():
            data.append([f"üë§ Name", full_name])

        fields = {
            "–ü–æ–ª": "sex", "–î–µ–≤–∏—á—å—è —Ñ–∞–º–∏–ª–∏—è": "maiden_name", "–ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è": "screen_name",
            "–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ": "relation", "–ü–∞—Ä—Ç–Ω–µ—Ä": "relation_partner", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è": "bdate",
            "–†–æ–¥–Ω–æ–π –≥–æ—Ä–æ–¥": "home_town", "–°—Ç—Ä–∞–Ω–∞": "country", "–ì–æ—Ä–æ–¥": "city", "–°—Ç–∞—Ç—É—Å": "status",
            "–¢–µ–ª–µ—Ñ–æ–Ω": "phone", "–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω": "verified", "–û–Ω–ª–∞–π–Ω": "online", "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã": "universities",
            "–®–∫–æ–ª—ã": "schools", "–†–∞–±–æ—Ç–∞": "occupation", "–õ–∏—á–Ω–æ–µ": "personal", "–ò–Ω—Ç–µ—Ä–µ—Å—ã": "interests",
            "–§–∏–ª—å–º—ã": "movies", "–¢–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ": "tv", "–ö–Ω–∏–≥–∏": "books", "–ò–≥—Ä—ã": "games", "–û —Å–µ–±–µ": "about",
            "–¶–∏—Ç–∞—Ç—ã": "quotes", "–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏": "relatives"
        }

        icons = {
            "–ü–æ–ª": "üöª", "–î–µ–≤–∏—á—å—è —Ñ–∞–º–∏–ª–∏—è": "üíç", "–ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è": "üîñ", "–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ": "üíë",
            "–ü–∞—Ä—Ç–Ω–µ—Ä": "üíû", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è": "üéÇ", "–†–æ–¥–Ω–æ–π –≥–æ—Ä–æ–¥": "üè†", "–°—Ç—Ä–∞–Ω–∞": "üåç", "–ì–æ—Ä–æ–¥": "üèôÔ∏è",
            "–°—Ç–∞—Ç—É—Å": "üìú", "–¢–µ–ª–µ—Ñ–æ–Ω": "üìû", "–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω": "‚úÖ", "–û–Ω–ª–∞–π–Ω": "üíª", "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã": "üéì",
            "–®–∫–æ–ª—ã": "üè´", "–†–∞–±–æ—Ç–∞": "üíº", "–õ–∏—á–Ω–æ–µ": "ü§´", "–ò–Ω—Ç–µ—Ä–µ—Å—ã": "üí°", "–§–∏–ª—å–º—ã": "üé¨", "–¢–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ": "üì∫",
            "–ö–Ω–∏–≥–∏": "üìö", "–ò–≥—Ä—ã": "üéÆ", "–û —Å–µ–±–µ": "üí¨", "–¶–∏—Ç–∞—Ç—ã": "‚ùù", "–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶"
        }

        for label, field in fields.items():
            value = user_info.get(field)
            icon = icons.get(label, "")
            if field == "bdate":
                value = format_bdate(value, target_lang) if value else None
            elif field == "sex":
                value = "–ú—É–∂—Å–∫–æ–π" if value == 2 else "–ñ–µ–Ω—Å–∫–∏–π" if value == 1 else None
            elif field == "verified":
                value = "–î–∞" if value else "–ù–µ—Ç"
            elif field == "online":
                value = "–î–∞" if value else "–ù–µ—Ç"
            elif field == "city":
                value = user_info['city'].get("title") if user_info.get('city') else None
            elif field == "occupation":
                value = user_info['occupation'].get("name") if user_info.get('occupation') else None
            elif field == "personal":
                value = format_personal_info(value, target_lang) if value else None
            elif field == "relatives":
                value = get_relative_names(value, target_lang)
            elif field == "status":
                value = wrap_text(value)

            if value:
                if field == "screen_name":
                    data.append([f"{icon} {translate_text(label, target_lang)}", value])
                else:
                    data.append([f"{icon} {translate_text(label, target_lang)}", format_value(value, target_lang)])

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–π
        response = format_data_with_fixed_value_alignment(data, value_start_pos=30)
        response += f"\n\nüåç –ê–Ω–∞–ª–∏–∑ –≥–æ—Ä–æ–¥–æ–≤ –¥—Ä—É–∑–µ–π:\n{friends_info}"
        response += f"\n\nüìå –ü–æ–¥–ø–∏—Å–∫–∏:\n{subscriptions_info}"
    else:
        response = translate_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", target_lang)

    await update.message.reply_text(f"```\n{response}\n```", parse_mode="Markdown")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(set_language))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))
    application.run_polling()


if __name__ == '__main__':
    main()
