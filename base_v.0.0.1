#RU_APP = 52617736
#RU_SECRET = MpFg3xZNEOXyBT77Fj1k
#EN_APP = 52617075
#EN_SECRET = qfDpuDhGN2zE7aSathiP
import requests
from vk_api import VkApi
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from tabulate import tabulate
from deep_translator import GoogleTranslator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = '7915283986:AAFIocGTVRJrVPMp0_ON1eJTH067AFODCyA'
VK_APP_ID = '52617075'
VK_APP_SECRET = 'qfDpuDhGN2zE7aSathiP'
VK_API_VERSION = '5.131'


def translate_text(text, target_language, source_language='auto'):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫ —Å –ø–æ–º–æ—â—å—é deep-translator."""
    try:
        translated_text = GoogleTranslator(source=source_language, target=target_language).translate(text)
        return translated_text
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text


def get_service_token():
    url = (
        f"https://oauth.vk.com/access_token?client_id={VK_APP_ID}"
        f"&client_secret={VK_APP_SECRET}&v={VK_API_VERSION}&grant_type=client_credentials"
    )
    response = requests.get(url)
    data = response.json()
    return data.get("access_token")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –í–ö API
VK_SERVICE_TOKEN = get_service_token()
vk_session = VkApi(token=VK_SERVICE_TOKEN)
vk = vk_session.get_api()


async def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='lang_ru')],
        [InlineKeyboardButton("üá¨üáß English", callback_data='lang_en')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language:", reply_markup=reply_markup)


async def set_language(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == 'lang_ru':
        context.user_data['language'] = 'ru'
        await query.edit_message_text(
            "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π.\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–ö, –ª–∏–±–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    elif query.data == 'lang_en':
        context.user_data['language'] = 'en'
        await query.edit_message_text("Language set to English.\nEnter the link to the VK page or the user ID.")


def format_bdate(bdate, target_language):
    month_names = {
        '01': '—è–Ω–≤–∞—Ä—è', '02': '—Ñ–µ–≤—Ä–∞–ª—è', '03': '–º–∞—Ä—Ç–∞', '04': '–∞–ø—Ä–µ–ª—è',
        '05': '–º–∞—è', '06': '–∏—é–Ω—è', '07': '–∏—é–ª—è', '08': '–∞–≤–≥—É—Å—Ç–∞',
        '09': '—Å–µ–Ω—Ç—è–±—Ä—è', '10': '–æ–∫—Ç—è–±—Ä—è', '11': '–Ω–æ—è–±—Ä—è', '12': '–¥–µ–∫–∞–±—Ä—è'
    }
    month_names_en = {
        '01': 'January', '02': 'February', '03': 'March', '04': 'April',
        '05': 'May', '06': 'June', '07': 'July', '08': 'August',
        '09': 'September', '10': 'October', '11': 'November', '12': 'December'
    }

    month_dict = month_names if target_language == 'ru' else month_names_en
    parts = bdate.split('.')
    if len(parts) == 2:
        day, month = parts
        month_name = month_dict.get(month.zfill(2), '')
        return f"{int(day)} {month_name}" if month_name else bdate
    elif len(parts) == 3:
        day, month, year = parts
        month_name = month_dict.get(month.zfill(2), '')
        return f"{int(day)} {month_name} {year}" if month_name else bdate
    return bdate


async def handle_link(update: Update, context: CallbackContext):
    url = update.message.text.strip()
    language = context.user_data.get('language', 'ru')
    target_lang = 'ru' if language == 'ru' else 'en'

    if url.startswith("https://vk.com/"):
        vk_id = url.split('/')[-1]
    else:
        vk_id = url

    if not vk_id:
        message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –í–ö." if language == 'ru' else "Please send a correct VK profile link."
        await update.message.reply_text(message)
        return

    user_info = fetch_vk_info(vk_id)

    if isinstance(user_info, dict):
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –ø–æ–ª–µ–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
        full_name = translate_text(f"{user_info.get('first_name')} {user_info.get('last_name')}", target_lang, 'en')
        gender = "–ú—É–∂—Å–∫–æ–π" if user_info.get('sex') == 2 and language == 'ru' else "–ñ–µ–Ω—Å–∫–∏–π" if user_info.get(
            'sex') == 1 and language == 'ru' else "Male" if user_info.get('sex') == 2 else "Female"
        bdate = format_bdate(user_info.get('bdate', '–ù–µ —É–∫–∞–∑–∞–Ω–æ' if language == 'ru' else 'Not specified'), target_lang)
        city = translate_text(
            user_info.get('city', {}).get('title', '–ù–µ —É–∫–∞–∑–∞–Ω' if language == 'ru' else 'Not specified'), target_lang)
        status = wrap_text(translate_text(user_info.get('status', ''), target_lang), max_length=40)
        verified = "–î–∞" if user_info.get('verified') and language == 'ru' else "Yes" if user_info.get(
            'verified') else "–ù–µ—Ç" if language == 'ru' else "No"
        online = "–î–∞" if user_info.get('online') and language == 'ru' else "Yes" if user_info.get(
            'online') else "–ù–µ—Ç" if language == 'ru' else "No"

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        data = [
            ["–ò–º—è" if language == 'ru' else "Name", full_name],
            ["–ü–æ–ª" if language == 'ru' else "Gender", gender],
            ["–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è" if language == 'ru' else "Birthday", bdate],
            ["–ì–æ—Ä–æ–¥" if language == 'ru' else "City", city],
            ["–°—Ç–∞—Ç—É—Å" if language == 'ru' else "Status", status],
            ["–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" if language == 'ru' else "Verified", verified],
            ["–û–Ω–ª–∞–π–Ω" if language == 'ru' else "Online", online]
        ]

        data = [[label, value] for label, value in data if value and value not in ["–ù–µ —É–∫–∞–∑–∞–Ω–æ", "Not specified"]]
        response = tabulate(data, tablefmt="plain")
    else:
        response = user_info

    await update.message.reply_text(f"```\n{response}\n```", parse_mode="Markdown")


def wrap_text(text, max_length=40):
    """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –¥–ª–∏–Ω–µ."""
    words = text.split()
    wrapped_text = ""
    line = ""

    for word in words:
        if len(line) + len(word) + 1 > max_length:
            wrapped_text += line + "\n"
            line = word
        else:
            line += " " + word if line else word

    wrapped_text += line
    return wrapped_text


def fetch_vk_info(vk_id):
    try:
        response = vk.users.get(
            user_ids=vk_id,
            fields="activities, about, books, bdate, city, country, status, followers_count, home_town, interests, "
                   "movies, music, nickname, occupation, online, personal, quotes, relation, relatives, schools, "
                   "sex, site, tv, universities, verified",
            v=VK_API_VERSION
        )
        if response:
            return response[0]
        else:
            return "API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: {e}"


def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(set_language))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))
    application.run_polling()


if __name__ == '__main__':
    main()




